import { formatDateIntoString } from "@/services/common-methods";

const baseUrl = `${process.env.NEXT_PUBLIC_XDS_API_URL}/api/v1`;

export const ENDPOINTS = {
  register: "/auth/register",
  setupPassword: "/passwords",
  validateCompleteSetupAccountToken: "/registration-requests/validate",
  login: "/auth/login",
  loginWithTerms: "/auth/login-with-terms",
  verifyToken: "/auth/verify-token",
  updatePersonalSetting: (userId: number) =>
    `/users/${userId}/personal-settings`,
  backupPersonalContact: (userId: number) =>
    `/users/${userId}/backup-personal-contacts`,
  companyGeneralInfo: (companyId: number) =>
    `/companies/${companyId}/general-info`,
  uploadSingle: "/uploads/single",
  uploadBanner: "/uploads/banner",
  getUsers: (
    searchStringVal: string,
    isLive: string,
    isArchive: string,
    isPaid: string,
    isFree: string,
    isFlagged: string,
    isTrail: string,
    userrole: string,
  ) =>
    `/users?search=${searchStringVal}&isLive=${isLive}&isArchive=${isArchive}&isPaid=${isPaid}&isFree=${isFree}&isFlagged=${isFlagged}&isTrail=${isTrail}&userRole=${userrole}`,
  archiveUser: (userId: number) => `/users/${userId}/archieve`,
  unArchiveUser: (userId: number) => `/users/${userId}/un-archive`,
  deleteUser: (userId: number) => `/users/${userId}/delete`,
  REGISTRATIONS: `/registration-requests`,
  filteredRegistrations: (
    searchString: string,
    needReview: string,
    approveChecked: string,
    rejectChecked: string,
    underReviewChecked: string
  ) =>
    `/registration-requests/filter?search=${searchString}&needToReview=${needReview}&isApproved=${approveChecked}&isRejected=${rejectChecked}&underReview=${underReviewChecked}`,
  approveRegistration: (registrationId: number) =>
    `/registration-requests/${registrationId}/approve`,
  completeFoundationalUsersRequest: (registrationId: number) =>
    `/registration-requests/${registrationId}/complete-foundational-request`,
  rejectRegistration: (registrationId: number) =>
    `/registration-requests/${registrationId}/reject`,
  deleteRegistration: (registrationId: number) =>
    `/registration-requests/${registrationId}/delete`,
  makeUnderReviewRegistration: (userId: number) =>
    `/registration-requests/${userId}/under-review`,
  getCompaniesWithPagination: (searchString: string) =>
    `/companies/pagination?search=${searchString}`,
  archiveCompany: (id: number) => `/companies/${id}/archieve`,
  deArchiveCompany: (id: number) => `/companies/${id}/de-archieve`,
  deleteCompany: (id: number) => `/companies/${id}/delete`,
  getCompanyById: (id: number) => `/companies/${id}`,
  getUserById: (id: number) => `/users/${id}`,
  sendPassword: (id: number, type: string) => `/passwords/${id}/send-password/${type}`,
  sendMultipleMails: "/passwords/send-multiple-password",
  resetPassword: (id: number, type: string) => `/passwords/${id}/reset-password/${type}`,
  getTopViewedProfiles: "/companies/top-viewed-profiles",
  getspProfilestats: "/companies/get-company-profile-stats",
  getMostActiveBuyers: "/companies/top-page-visited",
  topViewedSponcers: "/companies/top-viewed-sponcers",
  importExcelData: "/companies/import-excel-data",
  sendFreeSpMail: "/passwords/send-free-sp-mail",
  downloadCompaniesCsv: (searchString: string) =>
    `/companies/export-excel-data?search=${searchString}`,
  setFoundingSponcer: (id: number | undefined, type: number) =>
    `/companies/${id}/set-founding-sponcer?type=${type}`,
  getfoundingsponsers: "/serviceproviders/foundingsponsors",
  getserviceproviders: (
    search: string,
    page: number,
    limit: number,
    //  services: string,
    companysize: string,
    region: string,
    SortField: string,
    sortColumn: string,
    sortColumnOrder: string,
    //  selectedCapabilities: string,
    selectedCapabilityId: string,
    isPremiumUsersOnly: boolean,
    eventsSelected: string,
    platformSelectedValues: string,
  ) =>
    // `/serviceproviders?search=${search}&page=${page}&limit=${limit}&services=${services}&companysize=${companysize}&region=${region}&sortField=${SortField}&sortcolumn=${sortColumn}&sortColumnorder=${sortColumnOrder}&capabilities=${selectedCapabilities}&selectedCapabilityId=${selectedCapabilityId}&isPremiumUsersOnly=${isPremiumUsersOnly}&eventsSelected=${eventsSelected}`,
    `/serviceproviders?search=${search}&page=${page}&limit=${limit}&companysize=${companysize}&region=${region}&sortField=${SortField}&sortcolumn=${sortColumn}&sortColumnorder=${sortColumnOrder}&selectedCapabilityId=${selectedCapabilityId}&isPremiumUsersOnly=${isPremiumUsersOnly}&eventsSelected=${eventsSelected}&platform=${platformSelectedValues}`,
  getServiceProviderShuffle: "/serviceproviders",
  getserviceslist: "/serviceproviders/serviceslist",
  getregionslist: "/serviceproviders/regionslist",
  getcompanysizeslist: "/serviceproviders/companysizeslist",
  getmyprojectslist: (id: number) => `/serviceproviders/getmyprojects/${id}`,
  getmylist: (id: number) => `/serviceproviders/getmylist/${id}`,
  addcompaniestomylist: "/serviceproviders/addcompaniestomylist",
  addListsToMyProjects: "/serviceproviders/addListsToMyProjects",
  addcompaniestomyprojet: "/serviceproviders/addcompaniestomyproject",

  createlist: "/mylist",
  getMylists: () => `/mylist/archivedmylist`,
  deletemylistApi: (listId: number) => `/mylist/${listId}/delete`,
  getArchivedList: (id: number) => `/mylist/user/${id}`,
  getUnArchivedList: (id: number) => `/mylist/archivedmylist/user/${id}`,
  archiveListbyId: (id: number) => `/mylist/archive/${id}`,
  getListIntrestedCompanies: (id: number) => `/mylist/${id}/intrestedlist`,
  deletecompanyfromlist: (companyId: number, listId: number) =>
    `/mylist/removecompanyfrommylist/${companyId}/${listId}`,
  getmylistbyid: (id: number) => `/mylist/${id}`,
  updatelist: (id: number) => `/mylist/${id}`,
  downloadListIntrestedCompaniesCsv: (id: number) =>
    `/mylist/export-list/${id}`,

  createproject: "/myproject",
  getMyprojects: (id: number) => `/myproject/userId/${id}`,
  getmyprojectbyid: (id: number) => `/myproject/${id}`,
  getArchivedProjects: (id: number) =>
    `/myproject/archivedmyprojects/userId/${id}`,
  archiveProjectbyId: (id: number) => `/myproject/archive/${id}`,
  deletemyProjectApi: (projectId: number) => `/myproject/${projectId}`,
  getProjectIntrestedCompanies: (id: number) =>
    `/myproject/${id}/intrestedprojects`,
  updatemyproject: (id: number) => `/myproject/${id}`,
  deletecompanyfromproject: (companyId: number, projectId: number) =>
    `/myproject/removecompanyfrommyproject/${companyId}/${projectId}`,
  shortListProjectbyId: (id: number) => `/myproject/shortListCompany/${id}`,
  downloadProjectIntrestedCompaniesCsv: (id: number) =>
    `/myproject/export-project/${id}`,

  getmyopportunities: (id: number) => `/myopportunities/userId/${id}`,
  archiveOpportunitybyId: (id: number, companyId: number) =>
    `/myopportunities/archivemyopportunity/${id}/${companyId}`,
  updatemyopportunitystatus: (id: number) =>
    `/myopportunities/updatemyopportunitystatus/${id}`,
  getarchivedOpportunities: (id: number) =>
    `/myopportunities/archivedlist/companyId/${id}`,
  opportunityintrestedcompanies: (id: number) =>
    `/myopportunities/${id}/intrestedlist`,
  getmyopportunitybyid: (id: number) => `/myopportunities/${id}`,

  downloadRegistrationsCsv: (
    searchString: string,
    needReview: string,
    approveChecked: string,
    rejectChecked: string,
  ) =>
    `/registration-requests/export-excel-data?searchVal=${searchString}&needToReview=${needReview}&isApproved=${approveChecked}&isRejected=${rejectChecked}`,
  getCountries: "/serviceproviders/get-countries",
  saveContacts: "/companies/add-contacts",
  getCompanyContacts: (id: number) => `/companies/${id}/get-contacts`,
  getserviceprovidersdetails: (id: number) => `/serviceproviders/getbyid/${id}`,
  updatevisitingcount: (id: number, userId: number) => `/companies/getbyid/${id}/${userId}`,
  getopportunities: (
    search: string,
    page: number,
    limit: number,
    services: string,
    SortField: string,
    sortCustomColumn: string,
    sortCustomColumnField: string,
  ) =>
    `/opportunities?search=${search}&page=${page}&limit=${limit}&services=${services}&SortField=${SortField}&sortCustomColumn=${sortCustomColumn}&sortCustomColumnField=${sortCustomColumnField}`,
  getopportunityDetails: (id: number, companyId?: number) => `/opportunities/getbyid/${id}/${companyId}`,
  getAllopportunityDetails: (id: number, companyId?: number) => `/opportunities/getOpportunityById/${id}/${companyId}`,
  addopportunityintrest: "/opportunities/addintrestinOpportunity",
  getPlatforms: "/serviceproviders/get-platforms",
  getCompanyDiligenceAndSecurity: (id: number) =>
    `/companies/${id}/get-diligence-security`,
  updateCompanyAbout: (id: number) => `/companies/${id}/update-about`,
  getServiceAndCapabilities: "/companies/get-service-capabilities",
  saveFilesForCompanyProjects: `/uploads/upload-portfolio-project-files`,
  getPortfolioProjects: (id: number) =>
    `/companies/${id}/get-portfolio-projects`,
  getPortfolioAlbums: (id: number) =>
    `/companies/${id}/get-portfolio-albums`,
  getPortfolioAlbumsById: (id: number) =>
    `/companies/${id}/get-portfolio-albums-byid`,

  getSinglePortfolioProject: (id: number) =>
    `/companies/${id}/get-single-portfolio-project`,

  saveCertificateAndDiligence: "/companies/add-certificate-and-diligence",
  savePortfolioProjects: "/companies/add-portfolio-perojects",
  saveSinglePortfolioProject: "/companies/add-single-project",
  updateSinglePortfolioProject: (id: number) =>
    `/companies/${id}/update-single-project`,

  saveServiceAndCapabilities: "/companies/add-service-capability",
  getServicesAndCapabilities: (id: number) =>
    `/companies/${id}/get-sevices-and-capabilities`,
  getOpportunityServices: (id: number) =>
    `/companies/${id}/get-opportunity-services`,
  uploadmultipleimages: "/uploads/upload-portfolio-project-files",
  uploadSponcersLogoimages: "/uploads/upload-sponcers-logo-files",
  removePortfoliofiles: `/companies/delete-portfoliofiles`,
  savePortfolieData: "/companies/save-company-files-urls",
  getCompanyPortfolio: (companyId: number) =>
    `/companies/${companyId}/getCompanyPortfolio`,
  getCompanyPortfolioFiles: "/uploads/getuploads",

  createmyOpportunity: "/myopportunities",
  updatemyOpportunity: "/myopportunities/updateopportunity",
  myopportunitysavefiles: `/uploads/upload-myopportunity-files`,
  getindustrytype: "/myopportunities/getindustries/",
  gethomepagedetails: (userId: number, date: string) =>
    `/serviceproviders/gethomepage/${userId}/${date}`,
  changePassword: `/passwords/change-password`,
  passwordChange: `/passwords/password-change`,
  saveFilesForCompanyPortfolio: `/uploads/upload-portfolio-files`,
  deletePortfolioProjects: (id: number) => `/companies/${id}`,
  getStripeProducts: `/users/get-stripe-products`,
  getCheckoutForm: (userEmail: string, productId: string, token: string, checkMail: string) =>
    `/users/get-checkout-form?userEmail=${userEmail}&productId=${productId}&token=${token}&checkMail=${checkMail}`,
  cancelSubscription: `/users/cancel-subscription`,
  fetchSubscriptionDetails: (id: number) => `/users/${id}/get-subscriptions`,
  searchcompanies: (searchValue: string) => `/myproject/getcompanies/${searchValue}`,
  searchMylists: (searchValue: string) => `/myproject/getMylists/${searchValue}`,
  sendResetPasswordLink: "/passwords/send-reset-password-link",
  getUserFromPasswordToken: (token: string) => `/users/backup-personal-contacts/get-user?token=${token}`,
  resetNewPassword: "/passwords/reset-new-password",
  getFlaggedUserDetails: (searchStringVal: string) => `/users/get-flagged-users?search=${searchStringVal}`,
  savethesponcersLogos: "/companies/save-sponcers-logo-urls",
  getSponcerslogoUrls: (type: "platinum" | "sponsered") => `/companies/get-sponcers-logo-urls/${type}`,
  reportAUser: "/companies/report-a-user",
  contactUs: "/mailer/contactUs",
  updateTourStatus: (companyId: number) => `/companies/updatetourstatus/${companyId}`,
  getCountOfNewIntrests: `/myopportunities/get-count-new-intrests`,
  setIntrestToRead: (userId: number, intrestId: string) => `/myopportunities/${userId}/set-intrest-to-read?intrestId=${intrestId}`,
  addportfolioalbum: '/companies/insert-portfolio-album',
  deleteportfolioalbum: (albumId: number) => `/companies/delete-portfolio-album/${albumId}`,
  getAllNotesFromBuyer: (companyId: number) => `/serviceproviders/get-all-notes/${companyId}`,
  addNewNote: '/serviceproviders/add-new-note',
  deleteNote: (nodeId: number) => `/serviceproviders/${nodeId}/delete-note`,
  updateNote: (nodeId: number) => `/serviceproviders/${nodeId}/update-note`,
  getAllServiceRates: (companyId: number) => `/serviceproviders/getAllServiceRates/${companyId}`,
  addServiceRates: '/serviceproviders/add-service-rates',
  updateServiceRates: (serviceId: number) => `/serviceproviders/${serviceId}/update-service-rates`,
  deleteServiceRate: (serviceId: number) => `/serviceproviders/${serviceId}/delete-service-rate`,
  getAllProjectPerformanceReviews: (companyId: number) => `/serviceproviders/get-all-project-performance-reviews/${companyId}`,
  addNewProjectPerformanceReview: '/serviceproviders/create-project-performance',
  deleteProjectPerformanceReview: (reviewId: number) => `/serviceproviders/${reviewId}/delete-project`,
  updateProjectReview: (reviewId: number) => `/serviceproviders/${reviewId}/update-project`,
  getOverallRatings: (companyId: number) => `/serviceproviders/getOverallRatings/${companyId}`,
  setAlloverratings: `/serviceproviders/rating-review-status`,
  uploadRateCard: `/uploads/uploadRateCard`,
  deleteRateCard: `/uploads/deleteRateCard`,
  videoThumbnails: "/uploads/video-thumbnail",
  checkExistedMails: (email: string) => `/auth/mailCheck/${email}`,
  getAlbumFilesById: (albumId: number) => `/serviceproviders/getAlbumFilesById/${albumId}`,
  createSingleCompany: '/companies/create-single-company',
  getUsersCountByType: '/companies/userscount',
  getLineChartUsersByType: (timelineType: string) => `/companies/lineChartUsers/${timelineType}`,
  addTheSearchedStringInStats: (id: number, searchVal: string, fromOpportunity: boolean) => `/serviceproviders/${id}/add-search-string?search=${searchVal}&fromOpportunity=${fromOpportunity}`,
  addTheSearchedServiceInStats: (id: number, serviceVal: string, capabilityVal: string, fromOpportunity: boolean) => `/serviceproviders/${id}/add-checked-service-capabilities?service=${serviceVal}&capability=${capabilityVal}&fromOpportunity=${fromOpportunity}`,
  getFiltersAndServiceStats: `/serviceproviders/get-search-filter-stats`,
  downloadUsersCsv: (
    searchStringVal: string,
    isLive: string,
    isArchive: string,
    isPaid: string,
    isFree: string,
    isFlagged: string,
    isTrail: string,
    userrole: string
  ) =>
    `/users/export-excel-data?search=${searchStringVal}&isLive=${isLive}&isArchive=${isArchive}&isPaid=${isPaid}&isFree=${isFree}&isFlagged=${isFlagged}&isTrail=${isTrail}&userRole=${userrole}`,
  downloadprofileperc: '/companies/export-profileperc-excel-data',
  getBuyersStats: `/serviceproviders/get-buyers-stats`,
  buyerContacted: (loggedCompanyId: number, providerCompanyId: number, type: string) => `/companies/buyer-contacted?loggedCompanyId=${loggedCompanyId}&providerCompanyId=${providerCompanyId}&type=${type}`,
  getCancelledSubscription: `/users/cancelled-subscription-details`,
  uploadCompanyProfilePic: `/uploads/upload-company-files`,
  getFaqs: `/users/faq/getUnHideFaqs`,
  getFaqQuestionById: (id: number) => `/users/faq/${id}`,
  saveFaqData: (faqId: number) => `/users/faq/${faqId}`,
  deleteFaq: (faqId: number) => `/users/faq/${faqId}`,
  getAllFaqQuestions: '/users/faq/getAll',
  uploadimageCommonMethod: `/uploads/global-imageupload`,
  uploadBannerAdsImage: `/uploads/upload-advertisment-files`,
  savingAdsData: `/users/advt`,
  getAllAds: `/users/advt/getAllAdvt`,
  updateAd: (id: number) => `/users/advt/${id}`,
  deleteAd: (id: number) => `/users/advt/${id}`,
  getBannerAds: (currentDate: string) => `/users/get-bannerAds/${currentDate}`,
  getHomePageBannerAds: (currentDate: string) => `/users/get-homePage-bannerAds/${currentDate}`,
  downloadMostViewedBuyers: `/companies/export-mostviewed-buyers-data`,
  updateCompanyReport: (id: number) => `/users/${id}`,
  getActiveSubscriptions: `/users/get-active-subscriptions`,
  downloadSubscriptionCsv: `/users/get-subscription-csvs`,
  downloadCancelledSubscriptionCsv: `/users/get-cancelled-subscription-csv`,
  updatePortfolioAbums: (id: number) => `/companies/${id}/update-portfolio-albums`,
  updatePortfolioProjects: (id: number) => `/companies/${id}/update-portfolio-projects`,
  updateProfileStatus: (id: number) => `/companies/${id}`,
  getCompanyProfileStatus: (companyId: number) => `/companies/${companyId}/get-companyProfile-status`,
  getCompanyAboutById: (id: number) => `/companies/${id}/about-data`,
  validateTwoFactorAuth: "/auth/two-factor-auth",
  resendOtp: "/auth/resend-otp",
  getUsersSecuritySettings: `/auth/get-security-settings`,
  saveUsersSecuritySetting: (isChecked: boolean) => `/users/save-security-settings?isChecked=${isChecked}`,
  getCompanyContactStats: "/companies/get-company-contact-stats",
  addEvent: `/events`,
  updateEvent: (eventId: number) => `/events/${eventId}`,
  getallEvents: `/events`,
  getallActiveEvents: (companyId: number) => `/events/get-all-events/${companyId}`,
  saveEventsOrder: (eventId: number) => `/events/update-event-order/${eventId}`,
  toggleEventShow: (eventId: number) => `/events/update-event-status/${eventId}`,
  deleteEvent: (eventId: number) => `/events/delete-event/${eventId}`,
  getEventById: (eventId: number) => `/events/${eventId}`,
  addAttendee: (eventId: number) => `/events/${eventId}/add-Aattandee`,
  removeAttendee: (eventId: number) => `/events/${eventId}/remove-Aattandee`,
  downloadCompanyContactStats: (type: string) => `/companies/get-company-contact-stats-csv?type=${type}`,
  uploadCompaniesCsv: `/companies/import-companies-csv`,
  getEventlist: `/serviceproviders/activeevents`,
  getEventsCount: '/companies/getEventsCount',

  generateUrlForListSharing: (listId: number) => `/mylist/${listId}/get-token-for-url`,
  generateUrlForProjectSharing: (listId: number) => `/myproject/${listId}/get-token-for-url`,
  getPublicCompaniesInList: (token: string | null) => `/mylist/public-list-companies?token=${token}`,
  getPublicListInProject: (token: string | null) => `/myproject/public-project-lists?token=${token}`,
  getCompnaiesInPublicProjectList: (token: string | null, listId: number) => `/myproject/public-get-list-companies?token=${token}&listId=${listId}`,
  saveSponseredService: '/events/save-sponsered-service',
  getsponseredserviceslist: '/events/get-sponsered-services-list',
  getSPserviceById: (spServiceId: number) => `/events/get-spservice-byid/${spServiceId}`,
  updateSpService: (spServiceId: number) => `/events/update-spservice/${spServiceId}`,
  getSponseredServices: (currentDate: string) => `/serviceproviders/find-sponsered-services?currentDate=${ currentDate }`,
  getAllcategories: '/articles/getAllCategories',
  createNewArticle: '/articles',
  getAllArticles: '/articles',
  getArchivedArticles: '/articles/getArchivedArticles',
  getAtciveArticles: '/articles/getAtciveArticles',
  updateSingleArticle: (id: number) => `/articles/${id}`,
  findArticleById: (id: number) => `/articles/${id}`,
  deleteArticle: (id: number) => `/articles/${id}`,
  saveArticleOrder: (id: number) => `/articles/update-article-order/${id}`,
  toggleArticleShow: (articleId: number) => `/articles/update-article-status/${articleId}`,
  archiveArticle: (articleId: number) => `/articles/archive-article-status/${articleId}`,

  getExportReport: "/companies/list-export-report",
  getShareReport: "/companies/list-share-report",
  getcompanyIdbySlug: (slug: string) => `/companies/get-company-by-slug/${slug}`,
  getcompanySlugbyId: (id: number) => `/companies/get-company-slug-by-id/${id}`,
  updateEmailAndCreateNewUser: "/passwords/recreate-user",
  getCompaniesForComparing: `/serviceproviders/get-company-details-by-ids`,

  getAdvtCompanyNames: "/users/advt/getAdvtNames",
  getCompaniesByAdClicks: `/users/advt/companyClicksReport`,
  downloadAdvtClicksByCompanies: `/users/advt/companyClicksReport-csv`,

  getUserSettings: `/serviceproviders/get-user-setting`,
  saveUserSettings: `/serviceproviders/save-user-settings`,
  getFlaggedUsers: `/users/get-flagged-users`,

  //CompanyAdmin Apis
  getGroupsList: '/company-admin/find-admin-groups',
  getGroupUsersById: (groupId: number) => `/company-admin/find-group-users/${groupId}`,
  removeUserFromGroup: (groupId: number, userId: number) => `/company-admin/remove-userfrom-group/${userId}/${groupId}`,
  getGroupPermissionsById: (groupId: number) => `/company-admin/find-groups-permissions/${groupId}`,
  saveGroupPermissions: (groupId: number) => `/company-admin/group-permission/${groupId}`,
  createCompanyUser: `/company-admin/create-company-user`,
  findCompanyUsers: '/company-admin/findCompanyUsers',
  findUserProfile: '/company-admin/findUserProfile',
  getCompanyUserById: (id: number) => `/company-admin/findCompanyUser/${id}`,
  deleteCompanyUserById: (id: number) => `/company-admin/delete-company-user/${id}`,
  assignUserstoGroup: (id: number) => `/company-admin/assign-userto-group/${id}`,
  updateCompanyUser: '/users/update-company-user',
  checkUserMail: (useremail: string) => `/company-admin/check-user-email/${useremail}`,
  getGroupNameById: (groupId: number) => `/company-admin/get-group-name/${groupId}`,
  checkPermissions: (id: number) => `/company-admin/check-permissions/${id}`,
  getAllInvitees: (
    searchStringVal: string,
    isLive: string,
    isArchive: string,
    userrole: string,
  ) =>
    `/company-admin?search=${searchStringVal}&isLive=${isLive}&isArchive=${isArchive}&userRole=${userrole}`,
  downloadInviteesCsv: (
    searchStringVal: string,
    isLive: string,
    isArchive: string,
    userrole: string
  ) =>
    `/company-admin/export-excel-data?search=${searchStringVal}&isLive=${isLive}&isArchive=${isArchive}&userRole=${userrole}`,
  getInviteeById: (id: number) => `/company-admin/get-invitee-by-id/${id}`,
  updateArchiveStatusAdminUser: (id: number) => `/company-admin/update-arcive-status/${id}`,
  deleteAdminUser: (id: number) => `/company-admin/delete-admin-user/${id}`,
  resetInviteePassword: (id: number) => `/passwords/${id}/reset-invitee-password`,
  getSubUsersCount: "/users/get-sub-users-counts",
  updateAvgPerformanceReview: '/serviceproviders/update-average-performance-rating',
  updateCompanyUserById: (id: number) => `/company-admin/update-company-user/${id}`,
  getMarkePagetDetails: (date: string) => `/serviceproviders/get-dynamic-data/${date}`,

  //admin api's
  findCompanyAdminUsers: (companyId: number) => `/company-admin/admin-company-users/${companyId}`,
  findCompanyAdminGroups: (companyId: number) => `/company-admin/admin-company-groups/${companyId}`,
  updateUsersLimit: (userId: number) => `/users/update-company-user-limit/${userId}`,
  externalClicks: (adId: number) => `/users/advt/externalClicks/${adId}`,
  followUnfollowCompany: (id: number, isActive: boolean) => `/companies/${id}/follow-unfollow?isActive=${isActive}`,
  getCompaniesFollowingDetails: (role: string) => `/companies/get-follow-details?userRole=${role}`,
  getNotifications: (date: string) => `/companies/get-all-notifications/${date}`,
  markNotificationsRead: `/companies/make-notifications-read`,
  getMysparkReport: (selectType: string) => `/serviceproviders/admin/myspark-report/${selectType}`,
  updatingUserDetails: (userId: number) => `/users/admin/${userId}/edit-user-details`,
  saveNotificationDate: (notificationId: number) => `/users/admin-notificationUpdate/${notificationId}`,
  getAllAdminNotifications: `/users/admin-notifications/getAll`,
  deleteAdminNotification: (notificationId: number) => `/users/admin-notificationDelete/${notificationId}`,
  notificationHideAndShow: (notificationId: number) => `/users/admin-notificationHideAndShow/${notificationId}`,
  getNotificationById: (notificationId: number) => `/users/admin-notifications/${notificationId}`,

  //company reports
  getAdminDashboardReports: `/company-reports/dashboard`,
  getAdminChartsReports: `/company-reports/dashboard/statistics`,
  getAdminListsDataReports: `/company-reports/dashboard/listdata`,
  getAdminStripeReports: `/company-reports/dashboard/stripedata`,
  getAdminMailChimpReports: (type: string) => `/company-reports/dashboard/mailchimp/${type}`,

  getReSubscriptionDetails: `/users/re-subscription-details`,
  downloadReSubscriptionCsv: `/users/get-re-subscription-csv`,
  updatingEventMeet: (companyId: number) => `/events/update-event-meet/${companyId}`,
  generateFilterShareLink: '/serviceproviders/generateFiltersLink',
  getFilterData: (token: string) => `/serviceproviders/getFilterData/${token}`,
  checkGenerateFilterLinkUser: `/serviceproviders/checkGenerateFilterLinkUser`,
  getAllOpportinitiesForStats: `/myopportunities/admin/getAllOpportunities`,
  addServiceCategoryClickCount: (serviceId: number) => `/serviceproviders/${serviceId}/update-sponsored-service`,
  getServiceCategoryStats: (role: string) => `/serviceproviders/get-service-category-stats?role=${role}`,
  addListInUser: `/mylist/add-list-in-user`,
  addSpAnnouncement: `/serviceproviders/add-announcement`,
  getAnnouncements: `/serviceproviders/get-service-provider-announcements`,
  updateAnnouncementOrder: `/serviceproviders/update-announcement-order`,
  toggleAnnouncementArchiveStatus: (id: number) => `/serviceproviders/${id}/toggle-archive-status`,
  deleteAnnouncement: (id: number) => `/serviceproviders/${id}/delete-announcement`,
  updateAnnouncement: (id: number) => `/serviceproviders/${id}/update-announcement`,
  manageAnnouncementStatViewCount: `/serviceproviders/announcement-stat-view-count`,
  manageAnnouncementStatVisitCount: (id: number) => `/serviceproviders/${id}/announcement-stat-click-count`,
  getAnnouncementsStats: (search: string) => `/serviceproviders/get-announcements-stats?search=${search}`,
  adminToggleAnnouncementArchiveStatus: (id: number) => `/serviceproviders/${id}/admin-toggle-announcement-status`, 
  adminDeleteAnnouncement: (id: number) => `/serviceproviders/${id}/admin-delete-announcement`,
  getLinkedinData: (url: string) => `/serviceproviders/linkedin-metaData/${url}`,
  getTestmonialsStats: (search: string) => `/serviceproviders/get-testmonial-stats?search=${search}`,
  manageTestmonialStatViewCount: `/serviceproviders/testmanial-stat-update-hide-count`,
  consultationMail: "/mailer/consultation",
  signingOut: "/auth/signingOut",
  downloadBuyerStats:'/serviceproviders/get-buyer-stats-csv',
};

export const getEndpointUrl = (endpoint: string): string => {
  return `${baseUrl}${endpoint}`;
};

